plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
	id 'com.google.cloud.tools.jib' version '3.3.2'
	id 'checkstyle'
	id 'com.diffplug.spotless' version '6.25.0'
}
spotless {
	java {
		googleJavaFormat()
	}
}
checkstyle {
	toolVersion '8.36.1'
	showViolations = true
	configFile = file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
	source = 'src/main/java'
}
checkstyleTest {
	source = 'src/test/java'
}
group = 'com.beeja.api'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.hibernate:hibernate-validator:7.0.1.Final'

	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'org.javers:javers-spring-boot-starter-mongo:7.3.3'
    testImplementation 'junit:junit:4.13.1'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.javers:javers-spring-boot-starter-mongo:7.3.3'
}
jacocoTestReport {
	reports {
		xml.required = true
	}

}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

sonarqube {
	properties {
		property "sonar.coverage.jacoco.xmlReportPath", "${project.buildDir}/reports/jacoco.xml"
		property "sonar.junit.reportPaths", "${project.buildDir}/reports/jacoco.xml"
		property "sonar.verbose", true
		property "sonar.sources", "src/main"
		property "sonar.tests", "src/test"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.projectName", "TBeeja"
		property "sonar.projectKey", "com.tac.tbeeja"
		property 'sonar.login', 'admin'
		property 'sonar.password', 'Admin@1234'
	}
}
tasks.named('sonarqube').configure {
	dependsOn test
}
ext {
	set('springCloudVersion', "2022.0.4")
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
task installLocalGitHook(type: Copy){
	from new File(rootProject.rootDir, 'scripts/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks')}
	fileMode 0775

}

//Below line is used to get lineSeparator for checkStyles based on OS
def osLineSeparator = System.getProperty("os.name").
		toLowerCase().
		contains("win") ? "crlf" : "lf"

tasks.withType(Checkstyle) {
	inputs.property("lineSeparator", osLineSeparator)
	configProperties = [
			'lineSeparator': osLineSeparator
	]
}

build.dependsOn installLocalGitHook
